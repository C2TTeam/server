// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { Struct } from "./google/protobuf/struct.pb";

export const protobufPackage = "user";

export interface DefaultRequest {
  query: { [key: string]: any } | undefined;
  params: { [key: string]: any } | undefined;
  body: { [key: string]: any } | undefined;
  headers: { [key: string]: any } | undefined;
}

export interface DefaultResponse {
  statusCode: number;
  message: string;
  errors: string[];
  data: { [key: string]: any } | undefined;
}

export const USER_PACKAGE_NAME = "user";

wrappers[".google.protobuf.Struct"] = { fromObject: Struct.wrap, toObject: Struct.unwrap } as any;

export interface UserServiceClient {
  userInfo(request: DefaultRequest): Observable<DefaultResponse>;
}

export interface UserServiceController {
  userInfo(request: DefaultRequest): Promise<DefaultResponse> | Observable<DefaultResponse> | DefaultResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["userInfo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
